-- compléter l'entête 
-- ==================

-- NOM    : BECIRSPAHIC
-- Prénom : Lucas

-- NOM    : FERNANDEZ
-- Prénom : Steban

-- Groupe : 4
-- binome :

-- ================================================

set sqlbl on


-- nettoyer le compte
@vider

-- Définition des types de données

prompt essai

@vider
create type Matiere as object (
 nom varchar2(30),
 prix number,
 masse number -- masse volumique
);
/
create type Piece as object (
 nom varchar2(30),
 not instantiable member function volume return number,
 not instantiable member function masse return number,
 member function prix return number
) not final not instantiable;
/
create type PieceBase under Piece (
 mat ref Matiere,
 overriding member function volume return number,
 overriding member function masse return number,
 overriding member function prix return number
) not final not instantiable;
/
create type Cylindre under PieceBase (
 rayon number,
 hauteur number,
 overriding member function volume return number,
 overriding member function masse return number,
 overriding member function prix return number
);
/
create type Sphere under PieceBase (
 rayon number,
 overriding member function volume return number,
 overriding member function masse return number,
 overriding member function prix return number
);
/
create type Parall under PieceBase (
 longueur number,
 largeur number,
 hauteur number,
 overriding member function volume return number,
 overriding member function masse return number,
 overriding member function prix return number
);
/
create type PieceQuantite as Object(
 refpiece ref Piece,
 quantite number
);
/
create type EnsPieces as table of PieceQuantite;
/
create type PieceComposite under Piece (
 coutA number,
 ensComposants EnsPieces,
 ensComposes EnsPieces,
 overriding member function volume return number,
 overriding member function masse return number,
 overriding member function prix return number
);
@compile


-- DEFINITION DES METHODES

drop type body PieceBase;
drop type body Cylindre;
drop type body Sphere;
drop type body Parall;

create type body PieceBase as
  overriding member function volume return number is
  begin
	return 0;
  end;
  overriding member function masse return number is
  pVolume number;
  masse_vol number;
  begin
	select volume() into pVolume from TPieceBase;
	select deref(self.mat).masse into masse_vol from TPieceBase;
	return pVolume * masse_vol;
  end;
  overriding member function prix return number is
  pMasse number;
  prix_kilo number;
  begin
	select masse() into pMasse from TPieceBase;
	select deref(self.mat).prix into prix_kilo from TPieceBase;
	return pMasse * prix_kilo; 
  end;
end;
/
create type body Cylindre as
  overriding member function volume return number is
  begin
	return 3.14*rayon*rayon*hauteur;
  end;
end;
/
create type body Sphere as
  overriding member function volume return number is
  begin
	return 4/3*3.14*rayon*rayon*rayon;
  end;
end;
/
create type body Parall as
  overriding member function volume return number is
  begin
	return longueur*largeur*hauteur;
  end;
end;
@compile
show errors

select p.volume() from TPieceBase p;

/
create type body PieceComposite under Piece
  overriding member function volume return number is
  begin

  end;
  overriding member function masse return number is
  begin

  end;
  overriding member function prix return number is
  begin

  end;
end;
@compile

-- REQUETES

--1
select m.nom, m.prix from TMatiere m;

--2
select m.nom from TMatiere m where m.prix <= 5;

--3
select value(p) from TPieceBase p
where p.mat = (select ref(m) from TMatiere m where m.nom = 'bois');

select value(p) from TPieceBase p where p.mat.nom = 'bois';

--4
select m.nom from TMatiere m where m.nom like('%fer%');

--5
select e.refpiece.nom from TPieceComposite p, table(p.ensComposants) e where p.nom='billard';

--6
select m.nom, (select count(*) from TPieceBase p where p.mat.nom = m.nom)
from TMatiere m
group by m.nom;

select m.nom, count(*)
from TMatiere m, TPieceBase p
where p.mat.nom = m.nom
group by m.nom;

--7
select value(m)
from TMatiere m
where (select count(*) from TPieceBase p where p.mat.nom = m.nom) >= 3;
